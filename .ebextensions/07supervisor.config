packages:
    yum:
        python27-setuptools: []
    python:
        supervisor: []

services: 
    sysvinit:
        supervisord:
            enabled: true
            ensureRunning: true
            files: "/etc/supervisord.conf"
            packages: 
                yum:
                    python27-setuptools: []
                python:
                    supervisor: []

commands:
    10create_supervisor_main_config_folter:
        command: "mkdir /etc/supervisord.d/"
        test: '[ ! -d /etc/supervisord.d/ ]'
    12create_supervisor_log_folder:
        command: "mkdir /var/log/supervisord"
        test: '[ ! -d /var/log/supervisord ]'
    13create_supervisor_run_folder:
        command: "mkdir /var/run/supervisord"
        test: '[ ! -d /var/run/supervisord ]'
    14permissions_supervisor_run_folder:
        command: "chown -R webapp: /var/run/supervisord/"
    15permissions_supervisor_log_folder:
        command: "chown -R webapp: /var/log/supervisord/"
        
    30remove_supervisord_init_bak:
        command: "rm -f /etc/init.d/supervisord.bak"
        test: "[ -f /etc/init.d/supervisord.bak ]"
    31remove_supervisord_sysconfig_bak:
        command: "rm -f /etc/sysconfig/supervisord.bak"
        test: "[ -f /etc/sysconfig/supervisord.bak ]"
    32remove_supervisord_conf_bak:
        command: "rm -f /etc/supervisord/supervisord.conf.bak"
        test: "[ -f /etc/supervisord/supervisord.conf.bak ]"
    33remove_supervisord_conf_bak:
        command: "rm -f /etc/supervisord.conf.bak"
        test: "[ -f /etc/supervisord.conf.bak ]"
    34remove_hook_supervisor_stop:
        command: "rm -f /opt/elasticbeanstalk/hooks/appdeploy/post/490-supervisor_stop.sh.bak"
        test: "[ -f /opt/elasticbeanstalk/hooks/appdeploy/post/490-supervisor_stop.sh.bak ]"
    35remove_hook_supervisor_stop:
        command: "rm -f /opt/elasticbeanstalk/hooks/appdeploy/post/500-supervisor_update.sh.bak"
        test: "[ -f /opt/elasticbeanstalk/hooks/appdeploy/post/500-supervisor_update.sh.bak ]"
    36remove_supervisord_conf_dir:
        command: "rm -rf /etc/supervisord/"
        test: "[ -d /etc/supervisord/ ]"
    37remove_supervisor_conf_dir:
        command: "rm -rf /etc/supervisor/"
        test: "[ -d /etc/supervisor/ ]"
            
    40chkconfig_add_supervisor:
        command: "/sbin/chkconfig --add supervisord"
    41chkconfig_enable_supervisor:
        command: "/sbin/chkconfig supervisord on"

container_commands:

    20copy_supervisor_laravel_queue_priority:
        command: "cat .ebextensions/supervisor/laravel-queue-priority.conf > /etc/supervisord.d/laravel-queue-priority.conf"
    21copy_supervisor_laravel_queue_sources:
        command: "cat .ebextensions/supervisor/laravel-queue-sources.conf > /etc/supervisord.d/laravel-queue-sources.conf"
        test: '[ "$APP_WORKER" = "true" ]'

files:
    "/etc/init.d/supervisord":
        mode: "000755"
        owner: root
        group: root
        content: |
            #!/bin/bash
            #
            # supervisord   Startup script for the Supervisor process control system
            #
            # Author:       Mike McGrath <mmcgrath@redhat.com> (based off yumupdatesd)
            #               Jason Koppe <jkoppe@indeed.com> adjusted to read sysconfig,
            #                   use supervisord tools to start/stop, conditionally wait
            #                   for child processes to shutdown, and startup later
            #               Erwan Queffelec <erwan.queffelec@gmail.com>
            #                   make script LSB-compliant
            #
            # chkconfig:    345 83 04
            # description: Supervisor is a client/server system that allows \
            #   its users to monitor and control a number of processes on \
            #   UNIX-like operating systems.
            # processname: supervisord
            # config: /etc/supervisord.conf
            # config: /etc/sysconfig/supervisord
            # pidfile: /var/run/supervisord/supervisord.pid
            #
            ### BEGIN INIT INFO
            # Provides: supervisord
            # Required-Start: $all
            # Required-Stop: $all
            # Short-Description: start and stop Supervisor process control system
            # Description: Supervisor is a client/server system that allows
            #   its users to monitor and control a number of processes on
            #   UNIX-like operating systems.
            ### END INIT INFO

            # Source function library
            . /etc/rc.d/init.d/functions

            # Source system settings
            if [ -f /etc/sysconfig/supervisord ]; then
                . /etc/sysconfig/supervisord
            fi

            # Path to the supervisorctl script, server binary,
            # and short-form for messages.
            supervisorctl=/usr/local/bin/supervisorctl
            supervisord=${SUPERVISORD-/usr/local/bin/supervisord}
            prog=supervisord
            pidfile=${PIDFILE-/var/run/supervisord/supervisord.pid}
            lockfile=${LOCKFILE-/var/lock/subsys/supervisord}
            STOP_TIMEOUT=${STOP_TIMEOUT-60}
            OPTIONS="${OPTIONS--c /etc/supervisord.conf}"
            RETVAL=0

            start() {
                echo -n $"Starting $prog: "
                daemon --pidfile=${pidfile} $supervisord $OPTIONS
                RETVAL=$?
                echo
                if [ $RETVAL -eq 0 ]; then
                    touch ${lockfile}
                    $supervisorctl $OPTIONS status
                fi
                return $RETVAL
            }

            stop() {
                echo -n $"Stopping $prog: "
                killproc -p ${pidfile} -d ${STOP_TIMEOUT} $supervisord
                RETVAL=$?
                echo
                [ $RETVAL -eq 0 ] && rm -rf ${lockfile} ${pidfile}
            }

            reload() {
                echo -n $"Reloading $prog: "
                LSB=1 killproc -p $pidfile $supervisord -HUP
                RETVAL=$?
                echo
                if [ $RETVAL -eq 7 ]; then
                    failure $"$prog reload"
                else
                    $supervisorctl $OPTIONS status
                fi
            }

            restart() {
                stop
                start
            }

            case "$1" in
                start)
                    start
                    ;;
                stop)
                    stop
                    ;;
                status)
                    status -p ${pidfile} $supervisord
                    RETVAL=$?
                    [ $RETVAL -eq 0 ] && $supervisorctl $OPTIONS status
                    ;;
                restart)
                    restart
                    ;;
                condrestart|try-restart)
                    if status -p ${pidfile} $supervisord >&/dev/null; then
                      stop
                      start
                    fi
                    ;;
                force-reload|reload)
                    reload
                    ;;
                *)
                    echo $"Usage: $prog {start|stop|restart|condrestart|try-restart|force-reload|reload}"
                    RETVAL=2
            esac

            exit $RETVAL

    "/etc/sysconfig/supervisord":
        mode: "000755"
        owner: root
        group: root
        content: |
            # Configuration file for the supervisord service
            #
            # Author: Jason Koppe <jkoppe@indeed.com>
            #             orginal work
            #         Erwan Queffelec <erwan.queffelec@gmail.com>
            #             adjusted to new LSB-compliant init script
            # make sure elasticbeanstalk PARAMS are being passed through to supervisord

            . /opt/elasticbeanstalk/support/envvars

            # WARNING: change these wisely! for instance, adding -d, --nodaemon
            # here will lead to a very undesirable (blocking) behavior

            #OPTIONS="-c /etc/supervisord.conf"
            PIDFILE=/var/run/supervisord/supervisord.pid
            #LOCKFILE=/var/lock/subsys/supervisord.pid

            # Path to the supervisord binary
            SUPERVISORD=/usr/local/bin/supervisord

            # Path to the supervisorctl binary
            SUPERVISORCTL=/usr/local/bin/supervisorctl

            # How long should we wait before forcefully killing the supervisord process ?
            #STOP_TIMEOUT=60

            # Remove this if you manage number of open files in some other fashion
            #ulimit -n 96000
            
    "/etc/supervisord.conf":
        mode: "000755"
        owner: root
        group: root
        content: |
            [unix_http_server]
            file=/tmp/supervisor.sock   ; (the path to the socket file)

            [supervisord]
            logfile=/var/log/supervisord/supervisord.log ; (main log file;default $CWD/supervisord.log)
            logfile_maxbytes=0        ; (max main logfile bytes b4 rotation;default 50MB)
            logfile_backups=0           ; (num of main logfile rotation backups;default 10)
            loglevel=info                ; (log level;default info; others: debug,warn,trace)
            pidfile=/var/run/supervisord/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
            nodaemon=false               ; (start in foreground if true;default false))
            nocleanup=true
            user=webapp
            minfds=1024                  ; (min. avail startup file descriptors;default 1024)
            minprocs=200

            [rpcinterface:supervisor]
            supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

            [supervisorctl]
            serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket

            [include]
            files = /etc/supervisord.d/*.conf

            [inet_http_server]
            port = 9000
            username = user
            password = drowssap
            
    "/opt/elasticbeanstalk/hooks/appdeploy/pre/490-supervisor_stop.sh":
        mode: "000755"
        owner: root
        group: root
        content: |
            #!/usr/bin/env bash
            . /opt/elasticbeanstalk/support/envvars

            if [ -f /usr/local/bin/supervisorctl ]; then
                echo "stop supervisor processes"
                /usr/local/bin/supervisorctl stop all
            fi
    
    "/opt/elasticbeanstalk/hooks/appdeploy/post/500-supervisor_update.sh":
        mode: "000755"
        owner: root
        group: root
        content: |
            #!/usr/bin/env bash
            . /opt/elasticbeanstalk/support/envvars

            if [ ! -f "/var/run/supervisord/supervisord.pid" ]; then
                echo "Start supervisor"
                service supervisord start
            fi

            echo "Update supervisor"
            /usr/local/bin/supervisorctl reread
            /usr/local/bin/supervisorctl update
            /usr/local/bin/supervisorctl start all
